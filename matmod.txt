#1.Что такое модель? Зачем она нужна? Пример модели.
Моде́ль - (фр. modèle от лат. modulus «мера, аналог, образец») — система, исследование которой служит средством для получения информации о другой системе; представление некоторого реального процесса, устройства или концепции.
Модель - абстрактное представление реальности в какой-либо форме предназначенное для рассмотрения определённых аспектов этой реальности и позволяющее получить ответы на изучаемые вопросы
Модель - это объект или описание объекта, системы для замещения одной системы (оригинала) другой системой для лучшего изучения оригинала или воспроизведения каких-либо его свойств.
Упрощенное представление реального объекта.
Для замещения одной системы (оригинала) другой системой для лучшего изучения оригинала или воспроизведения каких-либо его свойств.
Для изучения оригинальной системы без использования оригинальной системы.

@1#2.Что такое моделирование? Зачем оно нужно?
Моделирование - это универсальный метод получения описания функционирования объекта и использования знаний о нем. Моделирование используется в любой профессиональной деятельности  Математическое моделирование – это идеальное научное знаковое формальное моделирование, при котором описание объекта осуществляется на языке математики, а исследование модели проводится с использованием тех или иных математических методов.
 

@2#3.Что такое математическое моделирование? 
Математическое моделирование есть процесс установления соответствия реальной системе математической модели и исследование этой модели, позволяющее получить характеристики реальной системы. Математическая модель — это приближённое описание какого-либо класса явлений внешнего мира, выраженное математическими символами.
@3#4.Что такое имитационное моделирование? Зачем оно нужно? 
Имитационное моделирование воспроизводит на ЭВМ (имитирует) процесс функционирования исследуемой системы, соблюдая логическую и временную последовательность протекания процессов, что позволяет узнать данные о состоянии системы или отдельных ее элементов в определенные моменты времени. “Модель описывает реальную систему с достаточной точностью” = “Модель описывает все процессы так как они проходят в действительности” 
@4#5.Что такое “адекватность” в терминах моделирования? Что такое “инвариантные” признаки? 
Адекватность предполагает воспроизведение моделью с необходимой полнотой всех характеристик объекта, существенных для цели моделирования.  Понятие адекватности основывается на строгих в математическом отношении понятиях изоморфизма и гомоморфизма, но не совпадает с ними. Например, объект может быть изоморфен модели по структуре, в то время как целью моделирования является изучение его поведения. 
Про инвариантные признаки Если наблюдателю доступны разные модели объекта, но недоступен сам объект, он может сравнить имеющиеся модели и выделить некоторые  "инвариантные" (присутствующие во всех моделях) моменты, которые с большой степенью достоверности можно отнести к самому объекту. 
@5#6.Как установить адекватность модели? 
Для установления адекватности в случае конструктивных, в том числе информационных моделей, необходимо сформулировать цель моделирования и уточнить, какой из аспектов изучаемого объекта: внешний вид, структура  или поведение представляет в данном случае интерес.  В этом случае проблема адекватности сводится к установлению соответствующего изоморфизма или гомоморфизма.  
@6#7.Что такое изоморфизм и гомоморфизм
Две системы называются изоморфными, если между ними существует взаимно-однозначное соответствие: каждому элементу одной системы соответствует элемент другой и наоборот.   Две системы называются гомоморфными, если между ними существует однозначное соответствие: каждому элементу одной системы соответствует элемент другой, но не наоборот.
@7#8.Этапы моделирования
Определение цели и задач моделирования;  Определение системы;  Формулирование модели ;  Подготовка данных;  Трансляция модели;  Оценка адекватности; Планирование эксперимента;  Экспериментирование;  Интерпретация;  Реализация. 
@8#9.Псевдослучайные числа и процедуры их машинной генерации
Генерация базовой последовательности случайных чисел равномерно распределённых на интервале [0,1].  Генерация случайных воздействий с помощью преобразования базовой последовательности случайных чисел. 
@9#10.Моделирование случайных событий
A - случайное событие p - вероятность наступления события xi - случайная величина, равномерно распределенная на интервале [0,1]  
Если xi > p - событие А не наступило.
Если xi ≤ p - событие А наступило. 

@10#11.Виды моделирования в AnyLogic? вкратце про каждый 
Дискретно-событийное
Агентное Моделирование динамических систем = >Моделирование системной динамики
Гибридное (многоподходное) 
Вкратце про каждый
Дискретный Динамика системы представляется как последовательность событий. 
Агентный Метод имитационного моделирования, исследующий поведение децентрализованных агентов и то, как это поведение определяет поведение всей системы в целом. Индивидуальное поведение каждого агента образует глобальное поведение моделируемой системы. 
Моделирование динамических систем по сути является прародителем системно-динамического подхода моделирования. В отличие от системной динамики, переменные здесь несут некоторый "физический" смысл: координаты местоположения, скорость, ускорение, сила, концентрация и т.д., они, как это следует из их смысла, непрерывны и не являются агрегированными величинами, отражающими, например, общее количество или среднее значение нескольких сущностей. 
Системная динамика — это подход имитационного моделирования, своими методами и инструментами позволяющий понять структуру и динамику сложных систем.Также системная динамика — это метод моделирования, использующийся для создания точных компьютерных моделей сложных систем для дальнейшего использования с целью проектирования более эффективной организации и политики взаимоотношений с данной системой. Вместе, эти инструменты позволяют нам создавать микромиры-симуляторы, где пространство и время могут быть сжаты и замедлены так, чтобы мы могли изучить последствия наших решений, быстро освоить методы и понять структуру сложных систем, спроектировать тактики и стратегии для большего успеха.»
@11#12.Что такое “Агент”? 
Под агентом в агентном моделировании понимается элемент модели, который может иметь поведение, память (историю), контакты и т.д. Агенты могут моделировать людей, компании, проекты, автомобили, города, животных, корабли, товары и т.д.  Тип агента может отображать одного агента, а может — целую популяцию агентов. Популяция является коллекцией агентов одного типа. 
@12#13.Что такое “Эксперимент”? 
С помощью экспериментов задаются конфигурационные настройки модели. Есть несколько различных типов эксперимента, преимущественно будем пользоваться “простым”. 
@13#14.Что такое “Система”? 
Совокупность взаимосвязанных и взаимодействующих элементов, образующих целостность, обладающую свойствами, которые отсутствуют у её отдельных компонентов.   Ключевая идея: система больше суммы своих частей благодаря эмерджентным (возникающим) свойствам. 
@14#15.Основные характеристики системы 
Целостность: Система функционирует как единое целое, её свойства нельзя свести к простой сумме свойств элементов. Иерархичность: Системы могут быть вложены друг в друга (подсистемы) и сами являться частью более крупных систем (например, клетка → орган → организм). Структура: Упорядоченные связи и взаимодействия между элементами (например, сеть нейронов в мозге). Цель: Наличие функции или задачи, которую система выполняет (например, экосистема поддерживает биологическое равновесие). 
@15#16.Система, Открытость\закрытость\сложность. 
Открытые: Обмениваются с внешней средой энергией, веществом, информацией (например, город, живой организм). Закрытые: Изолированы от внешних воздействий (идеализированные модели, редки в реальности). Сложные: системы имеют нелинейные взаимодействия, самоорганизацию (например, климат, экономика). Большие: системы включают множество подсистем и требуют междисциплинарного подхода (например, транспортная сеть мегаполиса). Простые: Те что не попадают в классификацию выше
@16#17.Система: границы, среда, входы, выходы 
Границы определяют, что внутри/вне системы (например, стены фабрики). Среда  внешние факторы, влияющие на систему (например, законы для бизнеса).  Входы ресурсы (данные, материалы). Выходы продукты/услуги (например, готовый автомобиль на заводе). 
@17#18.Система: эмерджентность, обратная связь
Обратная связь: Механизм корректировки (например, термостат регулирует температуру). Эмерджентность: Свойства системы, которых нет у её элементов (например, интеллект муравейника). Транспортная сеть:  Входы — пассажиры,  выходы — доставка людей;  обратная связь — данные о загруженности. Соцсеть:  Элементы — пользователи,  алгоритмы;  эмерджентность — формирование трендов. 
@18#19.AnyLogic: диаграммы состояний
Если у агента можно выделить несколько состояний, выполняющих различные действия при происхождении каких-то событий, или если у агента есть несколько качественно различных поведений, последовательно сменяющих друг друга при происхождении определенных событий, то поведение такого объекта может быть описано в терминах диаграммы состояний.
Начало диаграммы состояний используется для того, чтобы обозначать начальное состояние диаграммы состояний.   У каждой диаграммы состояний должно быть одно и только одно начало диаграммы состояний. Состояние представляет собой местонахождение управления диаграммы состояний. Указатель начального состояния определяет начальное состояние внутри сложного состояния.  При передаче управления в сложное состояние активным станет то простое состояние внутри этого сложного состояния, на которое будет указывать указатель начального состояния. Внутри каждого сложного состояния на каждом уровне иерархии состояний должен быть ровно один указатель начального состояния. Переход означает переключение управления диаграммы состояний, ее переход из одного состояния в другое. Переход означает, что если происходит заданное событие срабатывания перехода, и выполняется заданное дополнительное условие, то диаграмма состояний переключается из одного состояния в другое и выполняет заданные действия. Ветвление представляет собой точку разветвления или соединения переходов. С помощью ветвлений вы можете создать переход, имеющий более одного пункта назначения, или соединить несколько переходов, выполняющих вместе некое общее действие. Сложное состояние может содержать глубокие и поверхностные исторические состояния. Поверхностное историческое состояние является ссылкой на наиболее часто посещаемое состояние в сложном состоянии, которое находится на данном уровне иерархии состояний. Глубокое историческое состояние является ссылкой на наиболее часто посещаемое состояние внутри этого сложного состояния. Конечное состояние является конечной точкой диаграммы состояния. Когда управление передается в конечное состояние, выполняется действие этого состояния, и диаграмма состояния завершает свою работу.  Из конечного состояния не могут выходить никакие переходы. 
@19#20.AnyLogic: дорожное движение
Как минимум один из следующих элементов: Дорога Перекресток Стоп-линия Автобусная остановка Парковка Но более часто - совокупность всех таких соединенных элементов. Блоки с помощью которых можно задать сценарии движения потоков машин: CarSource - порождает автомобили CarDispose - удаляет автомобили CarMoveTo - управляет движением CarEnter - превращает агента-машину в автомобиль CarExit - превращает автомобиль в агента-машину TrafficLight - светофор RoadNetworkDeskriptor - Управление всеми ТС в одной дорожной сети. Действия при входе\выходе, моделирование пробок. 
@20#21.AnyLogic: Библиотека пешеходного движения 
PedSource			Создает пешеходов.PedSink			Уничтожает пешеходов.PedGoTo			Направляет пешеходов к заданной цели.PedService			Имитирует обслуживание пешеходов в сервисах.PedWait			Oжидать в течение заданного времени в заданном месте.PedSelectOutput		Распределяет пешеходов между пятью выходамиPedEnter			Размещает пешеходов в моделируемом пространстве.PedExit			Удаляет пешеходов из моделируемого пространства.PedEscalator		Моделирует перемещение пешеходов с помощью эскалатора.PedElevator		Моделирует перемещение пешеходов в лифте на другой этаж.PedChangeLevel		Перемещает пешеходов на другой уровень.PedGroupAssemble	Создает группы из последовательности пешеходовPedGroupChangeFormation	Заставляет группу изменить форму.PedGroupDisassemble		Разбирает группу на пешеходовPedSettings			Позволяет задать общие параметры.
@21#22.AnyLogic: Библиотека моделирования потоков 





